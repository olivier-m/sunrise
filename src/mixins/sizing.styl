//
// Returns pixel size for rem or pixel value
//
get_px(size)
    if unit(size) == 'px'
        return size
    if unit(size) == 'rem'
        return unit(size * 10, 'px')

//
// Returns a rem size for pixel or rem value
//
get_rem(size)
    if unit(size) is 'rem'
        return size
    if unit(size) is 'px'
        return unit(size / 10, 'rem')

//
// Set rem size with a pixel fallback
//
set_remsize(property, args...)
    p1 = ()
    p2 = ()
    _args = ()

    -f(x)
        if length(x) > 1
            for _x in x
                -f(_x)
        else
            push(_args, x)

    for arg in args
        -f(arg)

    for arg in _args
        if arg is a 'unit' and (unit(arg) == 'px' or unit(arg) == 'rem')
            push(p1, get_px(arg))
            push(p2, get_rem(arg))
        else
            push(p1, arg)
            push(p2, arg)

    {property} p1
    if p1 != p2
        {property} p2


//
// Returns base line height
//
get_line_height()
    return get_px(base_font_size) * line_height


//
// Add a fixed bottom margin on block
//
flow_block(font_size=base_font_size)
    vertical_flow(font_size)
    lh = get_line_height()
    margin 0 0 get_px(lh) 0
    margin 0 0 get_rem(lh) 0

//
// Add padding values (and calc value when needed)
//
padded_box(border=0)
    p=get_line_height()
    padding p - border

    if (border > 0)
        padding 'calc(%s - %s)' % (get_rem(p) border)
    else
        padding get_rem(p)


//
// Add computed line-height and top position to put content on baseline
//
vertical_flow(font_size=base_font_size)
    min_line_height = 0.85
    font_size = get_px(font_size)

    // Base line height
    line = get_line_height()

    // Lines covered
    covers = unit(ceil(font_size / line), '')

    // See if we can use one line less
    if covers > 1 and (covers - 1) * line / font_size >= min_line_height
        covers = covers - 1

    // Set line-height
    lh = unit(round(covers * line / font_size, 5), '')
    if lh is not line_height
        line-height lh

    // Move block on baseline
    if font_size > line and line * covers != font_size
        pxtop = (line * covers - font_size) / covers - 1px
        position relative
        set_remsize(top, pxtop)
