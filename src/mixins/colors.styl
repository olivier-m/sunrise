contrasted(color, t=#fff, b=#000)
    ct = contrast(t, color)
    cb = contrast(b, color)
    if (ct.ratio > cb.ratio)
        return t
    return b

color_fg(color)
    color: color;

color_bg(color)
    background-color color
    color contrasted(color)

fade(color, value)
    return rgba(color, value)

//
// linear-gradient mixin from kouto-swiss
// http://kouto-swiss.io/
//
linear-gradient(start, props...)
    if not current-property or current-property[0] != 'background-image'
        error('linear-gradient() must be used within a "background-image" property')

    steps = ()
    compat_steps = ()
    if length(start) == 1
        if start is a 'color'
            push(steps, start)
            push(compat_steps, start)
        else
            push(steps, start)
            if unit(start) == 'deg'
                push(compat_steps, start + 180deg)
            else
                push(compat_steps, start)
    else
        push(steps, join(' ', start ))
        if(start[ 0 ] == 'to')
            shift(start)
            push(compat_steps, join(' ', opposite-position(start)))
        else
            push(compat_steps, join(' ', start ))

    for prop in props
        push( steps, join(' ', prop ))
        push( compat_steps, join(' ', prop ))

    for prefix in '-webkit' '-moz' '-ms' '-o'
        add-property('background-image', unquote(prefix + '-linear-gradient(' + join(',', compat_steps) + ')'))
    unquote('linear-gradient(' + join(',', steps) + ')')
